#+created: 20191205090736159
#+modified: 20210518200350018
#+origin: https://gist.github.com/dorneanu/1ff7e23125c55e07a0893b00768c69fa
#+revision: 0
#+tags: GIST HowTo Golang
#+title: Convert JSON string to structure
#+tmap.id: 292dfcdb-4656-4bf6-b72b-2b054d801dc5
#+type: text/vnd.tiddlywiki

#+begin_example
package main

import (
    "fmt"
     "encoding/json"
)

// Field is a key value structure
type Field struct {
    name string
    value string
}
    
func main() {
    fields := []Field{}
    jsonStr := `[
        {"a": "alles klar", "b": "c", "d": "1"}, 
        {"key": "value"}
    ]`
    data := []map[string]interface{}{}
    
    // Convert json string to list of map[string]interface{}
    err := json.Unmarshal([]byte(jsonStr), &data)
    if err != nil {
        panic(err)
    }
    
    for _, v := range data {
        // Keys contains available keys in current map
        keys := make([]string, 0, len(v))
        
        // Copy keys
        for k := range v {
            keys = append(keys, k)
        }
        
        for _, key := range keys {
            field := Field {
                name: key, 
                value: fmt.Sprintf("%s", v[key].(string)),
            }
                
            fields = append(fields, field)
        }
    }
    
    for _, f := range fields {
        fmt.Printf("%#v\n", f)
    }

}
#+end_example

- [[https://play.golang.org/p/cMutpCzpmth][Go Playground]]
