:PROPERTIES:
:ID:       7c4e66f6-ce2d-441b-8c33-51ba6aec412c
:END:
#+created: 20210622084055689
#+modified: 20220804093959825
#+revision: 0
#+tags: Topics Architecture
#+title: DDD
#+type: text/vnd.tiddlywiki

* Concepts
** Ubiquitous language
    - use the same terms in code as the user use
    - have *common* language between delivery team and actual people (aka customers)
      - helps to understand business by logic
      - helps with communication
    - use real-world language in code
** Aggregates
    - a representatino of real domain concept
      - something like an ~Order~, an ~Invoice~, ~Stock Item~
    - aggregates typically have an information cycle around them
    - in general
      - aggregate as something that has
        - state
        - identity
        - information cycle
          - that will be managed as part of the system
    - aggregates can have relationships to other aggregates
** Bounded context
:PROPERTIES:
:ID:       143d2ed2-443e-467f-94c7-3ff5326b9979
:ROAM_ALIASES: "DDD/Bounded Context"
:END:
  - a larger organizational boundary
    - within it explicit responsibilities need to be carried out
  - bounded contexts hide implementation details ([[#*%20Information%20hiding%5D%5BInformation%20hiding][* Information hiding][Information hiding]])
  - bounded contexts contain ~1-n~ aggregates
    - some aggregates may be exposed outside the bounded context
    - others may be hidden internally
** Event Storming
  - collaborative brainstorming exercise designed to help design a domain model
  - invented by [[https://www.eventstorming.com/][Alberto Brandolini]]

* Boundaries between microservices
  - There are some factors when defining clear boundaries between [[id:adce7f16-ab79-4935-b73e-71f3740a071f][Microservices]]
    - volatility
    - data
      - also with concern to security
    - technology
    - organizational
      - Layering Inside vs Layering Outside
