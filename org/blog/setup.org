#+author: Victor Dorneanu
#+startup: fold hideblocks
#+hugo_base_dir: /cs/priv/repos/blog
#+hugo_section: posts
#+hugo_auto_set_lastmod: t
#+hugo_paired_shortcodes: %sidenote
#+property: header-args :eval never-export
#+macro: zk [[https://tw5.brainfck.org/#$1][$2]]
#+macro: zk_topic [[https://brainfck.org/t/$1][$2]]
#+macro: zk_book [[https://brainfck.org/book/$1][$2]]
#+macro: bib [[https://tw5.brainfck.org/bib.html#$1][$2]]
#+macro: relref @@hugo:[@@ $1 @@hugo:]({{< relref "$2" >}})@@
#+macro: titleref @@hugo:{{< titleref "$1" "@@ $2 @@hugo:" >}}@@
#+macro: imglink @@html:<figure><a href="$1"><img src="$2"></a><figcaption>$3</figcaption></figure>@@
# Unicode callout numbers:  ‚ù∂ ‚ù∑ ‚ûå ‚ùπ ‚ù∫ ‚ùª ‚ùº ‚ùΩ ‚ùæ ‚ùø
# Other symbols: ‚Ñ¢

#+name: exports
#+begin_src emacs-lisp
;; Convert gbox line to markdown compatible code
(defun convert-gbox-to-md ()
 (interactive)
 (while (re-search-forward "{{< gbox src=\"\\([^\"]*\\)\" title=\"\\([^\"]*\\)\" caption=\"\\([^\"]*\\)\" pos=\".* >}}" nil t)
   (replace-match "<center>![image](https://blog.dornea.nu\\1)\n</center>\n\n<center><small>üëâ \\2</small></center>")))

(defun remove-heading-ids ()
  (interactive)
  (while (re-search-forward "\\(^#.*\\) \\(.+?\\) {#.*}$" nil t)
    (replace-match "\\1 \\2")))

(defun convert-html-caption ()
  (interactive)
  (while (re-search-forward "<div class=\"src-block-caption\">\\s-+<span class=\"src-block-number\">\\(.*?\\)</span>\\s-+\\(.*?\\)\\s-</div>" nil t)
    (replace-match "<center><small>\\1 \\2</small></center>")))

(defun convert-html-caption ()
  (interactive)
  (while (re-search-forward "<div class=\"src-block-caption\">\\([\n\r[:space:]]*\\)<span class=\"src-block-number\">\\(.*?\\)</span>\\([\n\r[:space:]]*\\)\\(.*?\\)\\([\n\r[:space:]]*</div>)" nil nil)
    (replace-match "<center><small>\\2: \\4</small></center>")))


#+end_src

#+RESULTS: exports
: convert-html-caption

#+name: setup
#+begin_src emacs-lisp :results silent :exports none
(defun blog/execute-startup-block ()
  (org-hugo-auto-export-mode)

  ;; set buffer variable
  (setq org-agenda-files nil)

  ;; set-fill-column
  (setq-local fill-column 90)

  (add-to-list 'org-hugo-special-block-type-properties '("sidenote" . (:trim-pre t :trim-post t)))
  )
#+end_src

# Local Variables:
# eval: (org-sbe "setup")
# End:
