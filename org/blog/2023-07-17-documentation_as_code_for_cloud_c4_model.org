:PROPERTIES:
:ID:       265c7aba-5b14-4101-8221-7ff017ab8153
:END:
#+SETUPFILE: blog.org
#+filetags: :aws:c4:architecture:documentation:
#+TITLE: Documentation as Code for Cloud - C4 Model
#+CREATED: 2023-07-17
#+HUGO_DRAFT: true
#+HUGO_CUSTOM_FRONT_MATTER: :series '("Documentation as Code for Cloud")
#+macro: pumlref @@html:<center>üëâ <a href="https://github.com/dorneanu/blog/blob/master/static/code/2023/documentation-as-code/plantuml//$1">Full PlantUML Code</a></center>@@

* Config                                                    :noexport:
This are some configuration variables for C4

#+name: puml-dir
#+begin_src emacs-lisp :exports none :var filename=""
(princ (concat "/cs/priv/repos/blog/static/posts/img/2023/documentation-as-code/" filename))
#+end_src

#+name: puml-code-dir
#+begin_src emacs-lisp :exports none :var filename=""
(princ (concat "/cs/priv/repos/blog/static/code/2023/documentation-as-code/plantuml/" filename))
#+end_src

#+begin_src emacs-lisp
(setq-local company-backends '(company-dabbrev company-files)
            company-dabbrev-other-buffers t
            company-dabbrev-ignore-case nil
            company-dabbrev-downcase nil)
#+end_src

* Introduction
In the last post, I've used PlantUML to draw things like *groups*, *accounts*, and *clusters*. However, I didn't focus on how
different parts inside the business layer interact (usually components related to the main application/system relevant
for your business). Now, we'll use a DSL
#+begin_sidenote
Domain-Specific Language specific for this use case
#+end_sidenote
to show these interactions between /components/, /services/, and /systems/. I'll use the *C4 model* to show the same system in *different ways* based on who we're showing it to. It allows us to adjust how much detail we include.

* C4 Model
:PROPERTIES:
:header-args: :exports none :results none
:END:

The C4 model was developed by [[https://simonbrown.je/][Simon Brown]] as a means of providing a *visual map* of system components across *four levels
of abstraction*, as suggested by its title. Each level of abstraction in the C4 model suits different *audiences*, from the
non-technical management level to detailed developer perspectives, each level of abstraction is tailored to meet its
observer's understanding. To maintain consistency when describing the system design, the C4 model uniformly applies the same terminology and abstractions across all its levels, effectively implementing ubiquitous language principles from Domain-Driven Design ({{{zk_topic(ddd,DDD)}}}).

#+caption: C4 model summary
#+begin_src plantuml :file (org-sbe puml-dir (filename \"c4-summary.png\"))
@startwbs
+ Level 1\nSoftware System
++ Level 2\nContainer
++ Level 2\nContainer
++ Level 2\nContainer
+++ Level 3\nComponent
+++ Level 3\nComponent
++++ Level 4\nCode
++++ Level 4\nCode
@endwbs
#+end_src

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/c4-summary.png" title="The 4 perspectives in the C4 model" caption="The 4 perspectives in the C4 model" pos="left" >}}

** Abstractions
The C4 model uses [[https://c4model.com/#Abstractions][abstractions]] to form an hierarchy of well-defined diagrams (at different levels). Currently these
abstractions are available:

1. *Person*
   - Represents human users interacting with the system (e.g., Administrator, End User, Customer).

2. *System*
   - A top-level view showing different people interacting with different software systems. (e.g., E-commerce Platform,
     Payment Gateway, our self-destructing email service üòé).

3. *Container*
   - Involves zooming into an individual system to reveal containers within. Examples include server-side applications, client-side applications, databases, etc.
   - not to be confused with Docker containers

4. *Component*
   - Dives deeper into an individual container to expose its components, like classes, interfaces or objects in your code.

** Diagram types
*** Level 1: Context diagram

Shows how your system fits into the larger system environment (system landscape). It basically shows *interactions*
between users and systems:
- e.g. A payment system interacting with an user and a banking system

#+begin_src plantuml :file (org-sbe puml-dir (filename \"c4-context-diagram.png\"))
@startuml ContextDiagram
title System Context diagram for Internet Banking System

actor Customer
actor BankEmployee
boundary InternetBanking
boundary EmailSystem
boundary MainframeBanking

BankEmployee --> InternetBanking : Uses
InternetBanking --> EmailSystem : Sends email notifications
InternetBanking --> MainframeBanking : Fetches account details
Customer --> InternetBanking : Uses

@enduml
#+end_src

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/c4-context-diagram.png" title="Context diagram" caption="Context diagram" pos="left" >}}

*** Level 2: Container diagram

Higher level view within a system itself. Shows software "containers" like web servers,
standalone apps, or databases. (e.g., An API server, a database, and a client app in a
single system)

#+begin_src plantuml :file (org-sbe puml-dir (filename \"c4-container-diagram.png\"))
@startuml ContainerDiagram
title Container diagram for Internet Banking System

actor Customer
actor BankEmployee
database "Database" as db
cloud "Email System"
[Web Application] as WebApp
[API Application] as ApiApp

Customer -- WebApp
BankEmployee -- WebApp
WebApp -- db
WebApp --> EmailSystem
db -- ApiApp

@enduml
#+end_src

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/c4-container-diagram.png" title="Container diagram" caption="Container diagram" pos="left" >}}

*** Level 3: Component diagram

Shows internal parts of a container. Mostly used with complex software. (e.g.,
Controllers, services, repositories inside of a web application)

#+begin_src plantuml :file (org-sbe puml-dir (filename \"c4-component-diagram.png\"))
@startuml ComponentDiagram
title Component diagram for Web Application

class AccountController
class AccountService
class AccountRepository
interface "Logging Component" as Log

AccountController --> AccountService : Uses
AccountService ..> AccountRepository : Uses <<persist>>
AccountService --> Log : Uses
AccountRepository --> Log : Uses

@enduml
#+end_src

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/c4-component-diagram.png" title="Component diagram" caption="Component diagram" pos="left" >}}

*** Level 4: Code diagram

A detailed view of the code level. For systems with little internal complexity, it can be
skipped. (e.g., UML class diagrams)

#+begin_src plantuml :file (org-sbe puml-dir (filename \"c4-code-diagram.png\"))
@startuml CodeDiagram
title UML class diagram for Service and Repository

class Account {
  +String holder
  +Double balance
}
class AccountDao {
  +void save(Account)
  +Account get(Long id)
}
AccountDao o--> Account

@enduml
#+end_src

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/c4-code-diagram.png" title="Code diagram" caption="Code diagram" pos="left" >}}

* Structurizr DSL
[[https://structurizr.com/][Structurizr]] is used for /describing/ and /visualizing/ architecture using the C4 model. One of the main selling points is
the fact you can define an entire (IT) architecture model using /text/. A typical model consists of:
- relationships between abstractions
- different *views*

Let's have a look at a simple example:

#+begin_src structurizr
workspace {

    model {
        user = person "User"

        webApp = softwareSystem "Web Application" {
            tags "System"
        }

        database = softwareSystem "Database" {
            tags "Database"
        }

        team = person "Development Team"

        user -> webApp "Uses"
    }

    views {
        container webApp {
            include *
            autoLayout
        }

        styles {
            element "Database" {
                color "#0000ff"
            }
        }
    }
}
#+end_src

What do we have?

- **Entities**:
  - "User": a person who uses the "Web Application".
  - "Web Application": a software system tagged as "System".
  - "Database": another software system tagged as "Database".
  - "Development Team": a person representing the team that develops the "Web Application".
- **Relationships**:
  - The "User" uses the "Web Application".
- **Container View**:
   - Focused on "Web Application".
   - Includes all elements in the model.
   - Uses automatic layout.
- **Styles**:
  - The "Database" elements are colored in blue ("#0000ff").

Before we move on, let's briefly discuss the installation steps.

** Installation

I'd suggest you use the Docker image for a safe playground:

#+begin_src shell
docker run -it --rm -p 1337:8080 -v ./:/usr/local/structurizr structurizr/lite
#+end_src

This will fetch the ~structurizr/lite~ Docker image from [[https://hub.docker.com/r/structurizr/lite][Dockerhub]], start the container, mount the current working
directory to ~/usr/local/structurizr~ and setup a port forwarding from ~localhost:1337~ to ~<docker container>:8000~.

#+html: {{< notice info >}}
üëâ I've setup a github repository with the code I'll be using in the next sections. Feel free to clone from
https://github.com/dorneanu/ripmail.
#+html: {{< /notice >}}

** Short recap
If you recall my [[/2023/07/18/documentation-as-code-for-cloud/][initial post]] the entire aim was to document a hypothetical self-destructing e-mail service.
In my [[/2023/07/30/documentation-as-code-for-cloud-plantuml/#sequence-diagrams][2nd blog post]] (about PlantUML) I've generated following /sequence diagram/:

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/plantuml-seq-send-aws-logging.png" title="" caption="" pos="left" >}}
{{{pumlref(plantuml-seq-send-aws-logging.puml)}}}

In the following I'll try to implement exactly this workflow using C4 and Structurizr DSL.
* ripmail
** Model
Let's start with the basic construct:

#+caption: Basic Structurizr construct
#+begin_src
workspace {  ‚ù∂
  name "Self-Destructing Email Service"
  description "The sofware architecture of the self-destructing email service"

  model {    ‚ù∑
    //  ...
  }

  views {    ‚ûå
    // System Landscape
 ‚ù∫ systemlandscape "SystemLandscape" {
      include *
      # autoLayout
    }

    // Themes
    // You can combine multiple themes!
 ‚ùª theme https://static.structurizr.com/themes/amazon-web-services-2023.01.31/theme.json

    styles { ‚ùπ
      element "Person" {
        color #ffffff
        fontSize 22
        shape Person
      }
      element "Sender" {
        color #ffffff
        background #8FB5FE
        shape Person
      }
      element "Recipient" {
        color #ffffff
        background #E97451
        shape Person
      }
    }
  }
}
#+end_src

So, what do we have?
- ‚ù∂ ~workspace~
  - Defines the workspace for a self-destructing email service.
- ‚ù∑ ~model~
  - This has to be implemented but basically it's a
  - Placeholder section where you'd define the elements (software systems, people, containers) and their relations.
- ‚ûå ~views~
  - A *System Landscape view* ‚ù∫ that includes all elements defined in the model.
  - The [[https://www.structurizr.com/help/themes][specified theme]] ‚ùª comes from an external JSON file, allowing broad customization of the look-and-feel.
  - Three styles are defined for different types of elements labeled as /Person/, /Sender/, and /Recipient/. These
    characters are all represented by the /Person/ shape.

Let's focus more on the ~model~:

#+begin_src

...

  model {
 ‚ù∂ sender = person "Sender" "Sender creates self-destructing email" {
      tags "Sender"
    }
 ‚ù∑ recipient = person "Recipient" "Recipient receives self-destructing email" {
      tags "Recipient"
    }

 ‚ûå group "Self-Destructing Email Service" {
      // Logging keeps track of several events
 ‚ùπ   logging = softwaresystem "Logging System" "Logs several events related to mail generation" {
        tags "Service API"
      }
 ‚ù∫   storage = softwaresystem "Storage System" "Stores encrypted mail content" {
        tags "Database"
        storageBackend = container "Storage Backend"
      }

 ‚ùª   notification = softwaresystem "Notification System" "Sends notification to recipient to view email" {
        tags "System"

        // --- Notification Service
        notificationService = group "Notification Service" {
          notificationAPI = container "Notification API" {
            tags "NotificationService" "Service API"
          }
        }
      }

   ...

#+end_src

We have following *elements* and *groups*:
- ‚ù∂ /Sender/: Person who creates the self-destructing email.
- ‚ù∑ /Recipient/: Person who receives the self-destructing email.
- ‚ûå /Self-Destructing Email Service/: Represents the overall service/system being described.

Additionally we have these *systems* inside the group:
- ‚ùπ /Logging System/: Keeps track of events related to mail creation.
- ‚ù∫ /Storage System/: Stored encrypted email content. Includes a /Storage Backend/ container.
- ‚ùª /Notification System/: Sends notification to recipient. Contains a /Notification Service/ group with a /Notification
  API/ container.

*** Main backend system

Now the *backend system* responsible for the business logic:

#+begin_src
...

      // Backend system responsible for the business logic
‚ù∂    backend = softwaresystem "Backend System" "Contains logic how self-destructing mails should be created and dispatched to the recipient." {
        tags "BackendSystem"
‚ù∑       webapplication = container "Web Application"

        // Services/
        // --- Authentication Service
‚ûå      authService = group "Authentication Service" {
‚ùπ        authAPI = container "Auth Service API" {
            tags "AuthService" "Service API"
          }
‚ù∫        authDB = container "Auth Service Database" {
            tags "AuthService" "Database"
‚ùª          authAPI -> this "Checks if credentials match"
          }
        }


        // --- Email Composition Service
‚ùº      mailCompositionService = group "Email Composition Service" {
‚ùΩ        mailCompositionAPI = container "Email Composition API" {
            tags "EmailCompositionService" "Service API"
          }
‚ùæ        mailDB = container "Email Composition Database" {
            tags "Emailcompositionservice" "Database"
‚ùø          mailCompositionAPI -> this "Stores metadata of mails"
          }

        }

        // --- Email Composition Service
‚ì´      viewEmailService = group "View Email Service" {
‚ì¨          viewEmailFrontend = container "Email View Frontend" {
            tags "ViewEmailService"
          }
        }

...
#+end_src

The /Backend System/ is the core system, with business logic, for creating/dispatching self-destructing mails.
of following *containers* and *services*:

- ‚ù∑ /Web Application/: The *frontend* component within the backend system for /creating/ mails.
- ‚ûå /Authentication Service/: Group handling user credential verification.
  - ‚ùπ /Auth Service API/: Provides interface for authentication service.
  - ‚ù∫ /Auth Service Database/: Stores user credential data.
  - ‚ùª /Auth Service API->Auth Service Database/: Indicates API checks credentials against this database.
- ‚ùº /Email Composition Service/: Group handling creation/storage of emails.
  - ‚ùΩ /Email Composition API/: Interface for the email composition service.
  - ‚ùæ /Email Composition Database/: Stores meta-information of emails.
  - ‚ùø /Email Composition API -> Email Composition Database/: Indicates API stores mail metadata in this database.
- ‚ì´ /View Email Service/: Group handling email display.
  - ‚ì¨ /Email View Frontend/: The *frontend* component withing the backend system for /viewing/ emails.

*** Relationships

And finally the *relationships* between different components:

#+begin_src
...
        // Store mail data and encrypted content
        mailCompositionAPI -> storage "Store mail metadata and content"

        // Notify recipient
        mailCompositionAPI -> notificationAPI "Notify recipient"
        notificationAPI -> mailcompositionAPI "Recipient notified"

        // Log events
        notificationAPI -> logging "Log Email sent event"

        // Sender creates new email
        sender -> webapplication "Create new mail"
        webapplication -> authAPI "Authenticate user"
        webapplication -> mailCompositionAPI "Create mails"
        notification -> recipient "Send out notification"
        backend -> logging "Create events"

        // Recipient receives new mail
        recipient -> webapplication "View self-destructing mail"
        webapplication -> viewEmailFrontend "View email"
        viewEmailFrontend -> mailDB
        viewEmailFrontend -> storage
...
#+end_src

#+caption: Relationships between different components
| From                 | To                   | Description                               |
|----------------------+----------------------+-------------------------------------------|
| Mail Composition API | Storage              | Store mail metadata and encrypted content |
| Mail Composition API | Notification API     | Notify recipient                          |
| Notification API     | Mail Composition API | Recipient notified                        |
| Notification API     | Logging              | Log Email sent event                      |
| Sender               | Web Application      | Create new mail                           |
| Web Application      | Auth API             | Authenticate user                         |
| Web Application      | Mail Composition API | Create mails                              |
| Notification         | Recipient            | Send out notification                     |
| Backend System       | Logging              | Create events                             |
| Recipient            | Web Application      | View self-destructing mail                |
| Web Application      | View Email Frontend  | View email                                |
| View Email Frontend  | MailDB               | Fetches email data for visualization      |
| View Email Frontend  | Storage              | Fetches email details for visualization   |
*** Deployments

Deployment components are required for the /deployment diagrams/. These illustrate how software systems are deployed onto
infrastructure elements in an environment. They also enable you to visualize how containers within a system map onto the infrastructure.

This kind of diagrams are very important as they provide important information regarding system runtime environment such
as scaling, redundancy, network topology, and communication protocols. They are crucial to understanding the physical
aspects and deployment context of a system.

#+begin_src structurizr
workspace {

  model {
  //  ...
  live = deploymentEnvironment "Live" { ‚ù∂
    // AWS
    deploymentNode "Amazon Web Services" { ‚ù∑
        tags "Amazon Web Services - Cloud"

          // Which region
    ‚ûå     deploymentNode "eu-central-1" {
            tags "Amazon Web Services - Region"
            ...
          }
    }
  }
  }

  views {
  // ...
  }
}
#+end_src

We're still defining the ~model~. Now we have defined a ~deploymentEnvironment~ /live/ ‚ù∂ which should be deployed into the AWS
Cloud ‚ù∑, namely in ~eu-central-1~ ‚ûå. In this region we'll have different /organizational units/ (OUs):

- OU: Tech

  This will host the *EKS cluster* as well as the *API Gateway* which serves as the
  main entrypoint for API calls.

- OU: Security

  This is where *alert & monitoring* will take place. Also here relevant data to
  the mail will be stored within *S3 buckets*. Finally we use *IAM* capabilities to
  make sure authentication and authorization works properly.

- OU: DevOps

  The *CI/CD* build pipeline and *infrastructure provisioning* will take place here.
  The software artefacts will be built here and deployed into the accounts
  inside "OU: Tech".

#+begin_src
...

       // Which region
       deploymentNode "eu-central-1" {
         tags "Amazon Web Services - Region"

         // ------------------------------------------------
         // Organizational Unit: DevOps
         // ------------------------------------------------
         deploymentNode "OU-DevOps" {...}

         // ------------------------------------------------
         // Organizational Unit: Tech
         // ------------------------------------------------
         ou_tech = deploymentNode "OU-Tech" {...}


         // ------------------------------------------------
         // Organizational Unit: Security
         // ------------------------------------------------
         deploymentNode "OU-Security" {...}
       }

...
#+end_src

**** OU: DevOps

But one thing at a time:

#+caption: Deployment components for the OU DevOps
#+begin_src
      // --------------------------------------------
      // Organizational Unit: DevOps
      // --------------------------------------------
      deploymentNode "OU-DevOps" {
‚ù∂      tags "Amazon Web Services - AWS Organizations Organizational Unit"

‚ù∑        deploymentNode "acc-devops-prod" {
‚ûå          tags "Amazon Web Services - AWS Organizations Account"

‚ùπ          vpc_management = deploymentNode "VPC (management)" {
‚ù∫            tags "Amazon Web Services - VPC Virtual private cloud VPC"

‚ùª            gitlab_server = infrastructureNode "Gitlab Server" {
‚ùº              tags "Amazon Web Services - EC2"
            }

          }
        }
      }
#+end_src

The DevOps OU deployment components are:
- Organizational Unit (*OU-DevOps*): Represents a unit in the organization.
  - ‚ù∂ Tagged as an Amazon Web Services (AWS) Organizations Organizational Unit.
- ‚ù∑ /acc-devops-prod/: Represents an account within the *OU-DevOps* unit.
  - ‚ûå Tagged as an AWS Organizations Account.
- ‚ùπ VPC (/vpc_management/): A Virtual Private Cloud (VPC) within the /acc-devops-prod/ account.
  - ‚ù∫ Tagged as an AWS VPC Virtual private cloud VPC.
- ‚ùª Gitlab Server (/gitlab_server/): Infrastructure node within the VPC.
  - ‚ùº Tagged as AWS EC2.

**** OU: Security

#+begin_src
     // ---------------------------------------------
     // Organizational Unit: Security
     // ---------------------------------------------
‚ù∂    deploymentNode "OU-Security" {
‚ù∑      tags "Amazon Web Services - AWS Organizations Organizational Unit"

‚ûå      deploymentNode "acc-security-logging" {
‚ùπ        tags "Amazon Web Services - AWS Organizations Account"

‚ù∫        s3_logging = infrastructureNode "S3 Bucket" {
‚ùª          tags "Amazon Web Services - Simple Storage Service"
         }

‚ùº        infrastructureNode "CloudWatch Logs" {
‚ùΩ          tags "Amazon Web Services - CloudWatch Logs"
         }
       }

‚ùæ      deploymentNode "acc-security-monitoring" {
‚ùø        tags "Amazon Web Services - AWS Organizations Account"

‚ì´        infrastructureNode "CloudWatch" {
‚ì¨          tags "Amazon Web Services - CloudWatch Alarm"
         }
       }
     }

#+end_src

The Security OU deployment components are:

- Organizational Unit (*OU-Security*): Represents a security unit in the organization.
  - ‚ù∂ Tagged as an AWS Organizations Organizational Unit.
- ‚ûå /acc-security-logging/: Represents an account within the *OU-Security* unit for logging purposes.
  - ‚ùπ Tagged as an AWS Organizations Account.
  - ‚ù∫ Contains an "S3 Bucket" infrastructure node.
    - ‚ùª Tagged as AWS Simple Storage Service.
  - ‚ùº Contains a "CloudWatch Logs" infrastructure node.
    - ‚ùΩ Tagged as AWS CloudWatch Logs.
- ‚ùæ /acc-security-monitoring/: Represents another account within the *OU-Security* unit for monitoring purposes.
  - ‚ùø Tagged as an AWS Organizations Account.
  - ‚ì´ Contains a "CloudWatch" infrastructure node.
    - ‚ì¨ Tagged as AWS CloudWatch Alarm.
**** OU: TECH

Now the most complicated one:

#+begin_src
     // --------------------------------------------
     // Organizational Unit: Tech
     // --------------------------------------------
‚ù∂    ou_tech = deploymentNode "OU-Tech" {
       tags "Amazon Web Services - AWS Organizations Organizational Unit"

‚ù∑      deploymentNode "acc-tech-prod" {
         tags "Amazon Web Services - AWS Organizations Account"

         // EKS control plane
‚ûå        eks_vpc = deploymentNode "EKS VPC" {
           tags = "Amazon Web Services - VPC Virtual private cloud VPC"

‚ùπ          eks_control_plane = infrastructureNode "EKS Control Plane" {
             tags = "Amazon Web Services - EKS Cloud"
           }
         }

         // ECR
‚ù∫        ecr = infrastructureNode "ECR" {
           tags "Amazon Web Services - Elastic Container Registry"
           description "Private ECR registry"
         }

         // EKS cluster
‚ùª        workload_vpc = deploymentNode "Workload VPC" {...}



         // DynamoDB instances
‚ùº        dbs = group "Databases" {...}

         // S3 (Storage System)
‚ùΩ        s3_storage = infrastructureNode "S3 Bucket (storage)" {
           tags "Amazon Web Services - Simple Storage Service"
         }

       }
     }

#+end_src
This will result in following components hierarchy:

- ‚ù∂ Organizational Unit (OU-Tech): Represents a technology unit within the organization.
- ‚ù∑ /acc-tech-prod/: Represents a production account within the "*OU-Tech*" unit.
  - *EKS control plane* deployed within an EKS VPC.
    - ‚ûå /EKS VPC/: VPC where the EKS control plane is deployed,
    - ‚ùπ /EKS Control Plane/: infrastructure node within EKS VPC.
  - ‚ù∫ /ECR/: Infrastructure node for the Elastic Container Registry with private ECR registry.
  - ‚ùª /Workload VPC/: Deployment node holding different workloads.
  - ‚ùº Databases group holds /DynamoDB/ instances.
  - ‚ùΩ /S3 Bucket (storage)/: Infrastructure node for the storage system.

Let's have a look what's inside the /workload VPC/:

#+begin_src
  // EKS cluster
  workload_vpc = deploymentNode "Workload VPC" {
    tags = "Amazon Web Services - VPC Virtual private cloud VPC"

    // AZ 1
‚ù∂   deploymentNode "Availability Zone 1" {
      tags = "Amazon Web Services - Region"

‚ù∑     deploymentNode "Subnet 1" {
        tags = "Amazon Web Services - VPC VPN Gateway"

‚ûå       eks_node_group1 = deploymentNode "EKS Managed Node Group" {
          tags = "Amazon Web Services - EKS Cloud"

‚ùπ         eks_node_group1_pod1 = deploymentNode "Pod 1" {
            tags = "Kubernetes - pod"
‚ù∫           pod1_authAPI = containerInstance authAPI
          }

‚ùª         eks_node_group1_pod2 = deploymentNode "Pod 2" {
            tags = "Kubernetes - pod"
‚ùº           pod2_mailCompositionAPI = containerInstance mailcompositionAPI
‚ùΩ           pod2_notificationAPI = containerInstance notificationAPI

          }

        }
      }

    }

    // AZ 2
‚ùæ   deploymentNode "Availability Zone 2" {
      tags = "Amazon Web Services - Region"

‚ùø     deploymentNode "Subnet 1" {
        tags = "Amazon Web Services - VPC VPN Gateway"

‚ì´       eks_node_group2 = infrastructureNode "EKS Managed Node Group" {
          tags = "Amazon Web Services - EKS Cloud"
        }

      }
    }
  }
#+end_src

The workload VPC consists of 2 availability zones:

- ‚ù∂ *Availability Zone 1*: A separate deployment node categorized as an AWS Region.
  - ‚ù∑ /Subnet 1/: Deployment node within Availability Zone 1.
  - ‚ûå /EKS Managed Node Group/: Node group for managing EKS resources.
  - ‚ùπ /Pod 1/: Deployment node within the /EKS Managed Node Group/.
    - ‚ù∫ Houses instance of /authAPI/ container.
  - ‚ùª /Pod 2/: Another deployment node within the /EKS Managed Node Group/.
    - ‚ùº Houses instance of /mailcompositionAPI/ container.
    - ‚ùΩ Houses instance of /notificationAPI/ container.
- ‚ùæ /Availability Zone 2/: Another separate deployment node categorized as an AWS Region.
  - ‚ùø /Subnet 1/: Deployment node within Availability Zone 2.
  - ‚ì´ /EKS Managed Node Group/: Infrastructure node for managing EKS resources.


Let's also have a look how we can use ~containerInstance~ for the databases:

#+begin_src
	 // DynamoDB instances
‚ù∂	 dbs = group "Databases" {
	   deploymentNode "DB VPC" {
		 tags = "Amazon Web Services - VPC Virtual private cloud VPC"

‚ù∑		 deploymentNode "DynamoDB (Auth)" {
		   tags "Amazon Web Services - DynamoDB"

‚ûå		   liveUserDB = containerInstance authDB
		 }

‚ùπ		 deploymentNode "DynamoDB (Mails)" {
		   tags "Amazon Web Services - DynamoDB"

‚ù∫		   liveMailDB = containerInstance mailDB
		 }
	   }
	 }

#+end_src

This will create:
- ‚ù∂ /Databases/: A group of databases within a DB VPC deployment node.
- ‚ù∑ /DynamoDB (Auth)/: DynamoDB instance for authentication.
  - ‚ûå Contains a live instance of /authDB/.
- ‚ùπ /DynamoDB (Mails)/: DynamoDB instance for mail metadata.
  - ‚ù∫ Contains a live instance of /mailDB/.


** Views
Views in Structurizr are used to create *visual* diagrams of your software architecture model. They provide a way to
communicate the different aspects of your system to *various stakeholders*. Views can be thought of as 'camera angles' on
your architecture model, each designed to present a certain perspective of the system.

*** System Landscape

#+begin_src
    // System Landscape
    systemlandscape "SystemLandscape" {
      include *
    }
#+end_src

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/structurizr-SystemLandscape.png" title="" caption="" pos="left" >}}

*** Deployment Live

#+begin_src
    // Deployment live
    deployment backend live "LiveDeployment"  {
      include *
      description "An example live deployment for the self-destructing email service"
    }

#+end_src

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/structurizr-LiveDeployment.png" title="" caption="" pos="left" >}}

*** Containers: All

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/structurizr-Containers_All.png" title="" caption="" pos="left" >}}

*** Containers: Notfication Service

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/structurizr-Containers_NotificationService.png" title="" caption="" pos="left" >}}

*** Containers: Mail Composition Service

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/structurizr-Containers_MailCompositionService.png" title="" caption="" pos="left" >}}

*** Containers: Authentication Service

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/structurizr-Containers_AuthenticationService.png" title="" caption="" pos="left" >}}


* Ilograph
Short

üëâ Check out [[https://www.ilograph.com/architecture-center/index.html][other architecture diagrams]] made with ilograph.
* Resources
*Tools*:

- 2023-10-05 ‚ó¶ [[https://icepanel.io/blog/2022-10-03-c4-model-for-system-architecture-design?utm_source=dev_to&utm_medium=post&utm_campaign=should_you_use_c4][IcePanel.io]]

  A /visual/ modelling tool for C4
- 2023-10-05 ‚ó¶ [[https://github.com/plantuml-stdlib/C4-PlantUML][C4-PlantUML]]

  #+begin_quote
  C4-PlantUML combines the benefits of PlantUML and the C4 model for providing a simple way of describing and communicate software architectures
  #+end_quote

*Articles*:
- 2023-10-08 ‚ó¶ [[https://www.dandoescode.com/blog/c4-models-with-structurizr][Software Diagrams - C4 Models with Structurizr]]
- 2023-07-10 ‚ó¶ [[https://practical.li/engineering-playbook/architecture/structurizr/][Structurizr - Practicalli Engineering Playbook]]
- 2022-10-31 ‚ó¶ [[https://dev.to/icepanel/c4-model-for-system-architecture-design-16dh][C4 model for system architecture design]]
- 2022-10-10 ‚ó¶ [[https://dev.to/indrive_tech/c4-models-architecture-from-simple-to-complex-38fk][C4 Models: Architecture From Simple To¬†Complex]]

*Structurizr*:
- 2023-10-07 ‚ó¶ [[https://www.structurizr.com/help/themes][Structurizr - Help - Themes]]

*Videos*:
- 2023-07-10 ‚ó¶ [[https://www.youtube.com/watch?v=f7i2wxQVffk&list=PLEx5khR4g7PLf2kQn3nYaZJC2Zv2GPbnY&ab_channel=GOTOConferences][C4 Models as Code ‚Ä¢ Simon Brown ‚Ä¢ YOW! 2022 - YouTube]]


#+begin_src emacs-lisp :results silent :exports none
;; auto-export
(defun esf/execute-startup-block
	(org-hugo-auto-export-mode)

  ;; set buffer variable
  (setq org-agenda-files nil)

  ;; set-fill-column
  (setq-local fill-column 90)

  (add-to-list 'org-hugo-special-block-type-properties '("sidenote" . (:trim-pre t :trim-post t)))

  )
#+end_src

# Local Variables:
# eval: (esf/execute-startup-block)
# End:
