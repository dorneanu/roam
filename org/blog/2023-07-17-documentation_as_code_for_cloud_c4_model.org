:PROPERTIES:
:ID:       265c7aba-5b14-4101-8221-7ff017ab8153
:END:
#+SETUPFILE: blog.org
#+filetags: :aws:c4:architecture:documentation:
#+TITLE: Documentation as Code for Cloud - C4 Model
#+CREATED: 2023-07-17
#+HUGO_DRAFT: true
#+macro: pumlref @@html:<center>ðŸ‘‰ <a href="https://github.com/dorneanu/blog/blob/master/static/code/2023/documentation-as-code/plantuml//$1">Full PlantUML Code</a></center>@@

* Config                                                    :noexport:
This are some configuration variables for C4

#+name: puml-dir
#+begin_src emacs-lisp :exports none :var filename=""
(princ (concat "/cs/priv/repos/blog/static/posts/img/2023/documentation-as-code/" filename))
#+end_src

#+name: puml-code-dir
#+begin_src emacs-lisp :exports none :var filename=""
(princ (concat "/cs/priv/repos/blog/static/code/2023/documentation-as-code/plantuml/" filename))
#+end_src

#+begin_src emacs-lisp
(setq-local company-backends '(company-dabbrev company-files)
            company-dabbrev-other-buffers t
            company-dabbrev-ignore-case nil
            company-dabbrev-downcase nil)
#+end_src

* Introduction
In the last post, I've used PlantUML to draw things like *groups*, *accounts*, and *clusters*. However, I didn't focus on how
different parts inside the business layer interact (usually components related to the main application/system relevant
for your business). Now, we'll use a DSL
#+begin_sidenote
Domain-Specific Language specific for this use case
#+end_sidenote
to show these interactions between /components/, /services/, and /systems/. I'll use the *C4 model* to show the same system in *different ways* based on who we're showing it to. It allows us to adjust how much detail we include.

* C4 Model
:PROPERTIES:
:header-args: :exports none :results none
:END:

The C4 model was developed by [[https://simonbrown.je/][Simon Brown]] as a means of providing a *visual map* of system components across *four levels
of abstraction*, as suggested by its title. Each level of abstraction in the C4 model suits different *audiences*, from the
non-technical management level to detailed developer perspectives, each level of abstraction is tailored to meet its
observer's understanding. To maintain consistency when describing the system design, the C4 model uniformly applies the same terminology and abstractions across all its levels, effectively implementing ubiquitous language principles from Domain-Driven Design ({{{zk_topic(ddd,DDD)}}}).

#+caption: C4 model summary
#+begin_src plantuml :file (org-sbe puml-dir (filename \"c4-summary.png\"))
@startwbs
+ Level 1\nSoftware System
++ Level 2\nContainer
++ Level 2\nContainer
++ Level 2\nContainer
+++ Level 3\nComponent
+++ Level 3\nComponent
++++ Level 4\nCode
++++ Level 4\nCode
@endwbs
#+end_src

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/c4-summary.png" title="The 4 perspectives in the C4 model" caption="The 4 perspectives in the C4 model" pos="left" >}}

** Abstractions
The C4 model uses [[https://c4model.com/#Abstractions][abstractions]] to form an hierarchy of well-defined diagrams (at different levels). Currently these
abstractions are available:

1. *Person*
   - Represents human users interacting with the system (e.g., Administrator, End User, Customer).

2. *System*
   - A top-level view showing different people interacting with different software systems. (e.g., E-commerce Platform,
     Payment Gateway, our self-destructing email service ðŸ˜Ž).

3. *Container*
   - Involves zooming into an individual system to reveal containers within. Examples include server-side applications, client-side applications, databases, etc.
   - not to be confused with Docker containers

4. *Component*
   - Dives deeper into an individual container to expose its components, like classes, interfaces or objects in your code.

** Diagram types
*** Level 1: Context diagram

Shows how your system fits into the larger system environment (system landscape). It basically shows *interactions*
between users and systems:
- e.g. A payment system interacting with an user and a banking system

#+begin_src plantuml :file (org-sbe puml-dir (filename \"c4-context-diagram.png\"))
@startuml ContextDiagram
title System Context diagram for Internet Banking System

actor Customer
actor BankEmployee
boundary InternetBanking
boundary EmailSystem
boundary MainframeBanking

BankEmployee --> InternetBanking : Uses
InternetBanking --> EmailSystem : Sends email notifications
InternetBanking --> MainframeBanking : Fetches account details
Customer --> InternetBanking : Uses

@enduml
#+end_src

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/c4-context-diagram.png" title="Context diagram" caption="Context diagram" pos="left" >}}

*** Level 2: Container diagram

Higher level view within a system itself. Shows software "containers" like web servers,
standalone apps, or databases. (e.g., An API server, a database, and a client app in a
single system)

#+begin_src plantuml :file (org-sbe puml-dir (filename \"c4-container-diagram.png\"))
@startuml ContainerDiagram
title Container diagram for Internet Banking System

actor Customer
actor BankEmployee
database "Database" as db
cloud "Email System"
[Web Application] as WebApp
[API Application] as ApiApp

Customer -- WebApp
BankEmployee -- WebApp
WebApp -- db
WebApp --> EmailSystem
db -- ApiApp

@enduml
#+end_src

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/c4-container-diagram.png" title="Container diagram" caption="Container diagram" pos="left" >}}

*** Level 3: Component diagram

Shows internal parts of a container. Mostly used with complex software. (e.g.,
Controllers, services, repositories inside of a web application)

#+begin_src plantuml :file (org-sbe puml-dir (filename \"c4-component-diagram.png\"))
@startuml ComponentDiagram
title Component diagram for Web Application

class AccountController
class AccountService
class AccountRepository
interface "Logging Component" as Log

AccountController --> AccountService : Uses
AccountService ..> AccountRepository : Uses <<persist>>
AccountService --> Log : Uses
AccountRepository --> Log : Uses

@enduml
#+end_src

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/c4-component-diagram.png" title="Component diagram" caption="Component diagram" pos="left" >}}

*** Level 4: Code diagram

A detailed view of the code level. For systems with little internal complexity, it can be
skipped. (e.g., UML class diagrams)

#+begin_src plantuml :file (org-sbe puml-dir (filename \"c4-code-diagram.png\"))
@startuml CodeDiagram
title UML class diagram for Service and Repository

class Account {
  +String holder
  +Double balance
}
class AccountDao {
  +void save(Account)
  +Account get(Long id)
}
AccountDao o--> Account

@enduml
#+end_src

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/c4-code-diagram.png" title="Code diagram" caption="Code diagram" pos="left" >}}

* Structurizr DSL
[[https://structurizr.com/][Structurizr]] is used for /describing/ and /visualizing/ architecture using the C4 model. One of the main selling points is
the fact you can define an entire (IT) architecture model using /text/. A typical model consists of:
- relationships between abstractions
- different *views*

Let's have a look at a simple example:

#+begin_src structurizr
workspace {

    model {
        user = person "User"

        webApp = softwareSystem "Web Application" {
            tags "System"
        }

        database = softwareSystem "Database" {
            tags "Database"
        }

        team = person "Development Team"

        user -> webApp "Uses"
    }

    views {
        container webApp {
            include *
            autoLayout
        }

        styles {
            element "Database" {
                color "#0000ff"
            }
        }
    }
}
#+end_src

What do we have?

- **Entities**:
  - "User": a person who uses the "Web Application".
  - "Web Application": a software system tagged as "System".
  - "Database": another software system tagged as "Database".
  - "Development Team": a person representing the team that develops the "Web Application".
- **Relationships**:
  - The "User" uses the "Web Application".
- **Container View**:
   - Focused on "Web Application".
   - Includes all elements in the model.
   - Uses automatic layout.
- **Styles**:
  - The "Database" elements are colored in blue ("#0000ff").

Before we move on, let's briefly discuss the installation steps.

** Installation

I'd suggest you use the Docker image for a safe playground:

#+begin_src shell
docker run -it --rm -p 1337:8080 -v ./:/usr/local/structurizr structurizr/lite
#+end_src

This will fetch the ~structurizr/lite~ Docker image from [[https://hub.docker.com/r/structurizr/lite][Dockerhub]], start the container, mount the current working
directory to ~/usr/local/structurizr~ and setup a port forwarding from ~localhost:1337~ to ~<docker container>:8000~.

#+html: {{< notice info >}}
ðŸ‘‰ I've setup a github repository with the code I'll be using in the next sections. Feel free to clone from
https://github.com/dorneanu/ripmail.
#+html: {{< /notice >}}

** Short recap
If you recall my [[/2023/07/18/documentation-as-code-for-cloud/][initial post]] the entire aim was to document a hypothetical self-destructing e-mail service.
In my [[/2023/07/30/documentation-as-code-for-cloud-plantuml/#sequence-diagrams][2nd blog post]] (about PlantUML) I've generated following /sequence diagram/:

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/plantuml-seq-send-aws-logging.png" title="" caption="" pos="left" >}}
{{{pumlref(plantuml-seq-send-aws-logging.puml)}}}

In the following I'll try to implement exactly this workflow using C4 and Structurizr DSL.
* ripmail
** Views
*** System Landscape

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/structurizr-SystemLandscape.png" title="" caption="" pos="left" >}}

*** Deployment Live

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/structurizr-LiveDeployment.png" title="" caption="" pos="left" >}}

*** Containers: All

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/structurizr-Containers_All.png" title="" caption="" pos="left" >}}

*** Containers: Notfication Service

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/structurizr-Containers_NotificationService.png" title="" caption="" pos="left" >}}

*** Containers: Mail Composition Service

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/structurizr-Containers_MailCompositionService.png" title="" caption="" pos="left" >}}

*** Containers: Authentication Service

#+html: {{< gbox src="/posts/img/2023/documentation-as-code/structurizr-Containers_AuthenticationService.png" title="" caption="" pos="left" >}}



* Ilograph
Short
* Resources
*Tools*:

- 2023-10-05 â—¦ [[https://icepanel.io/blog/2022-10-03-c4-model-for-system-architecture-design?utm_source=dev_to&utm_medium=post&utm_campaign=should_you_use_c4][IcePanel.io]]

  A /visual/ modelling tool for C4
- 2023-10-05 â—¦ [[https://github.com/plantuml-stdlib/C4-PlantUML][C4-PlantUML]]

  #+begin_quote
  C4-PlantUML combines the benefits of PlantUML and the C4 model for providing a simple way of describing and communicate software architectures
  #+end_quote

*Articles*:
- 2023-10-08 â—¦ [[https://www.dandoescode.com/blog/c4-models-with-structurizr][Software Diagrams - C4 Models with Structurizr]]
- 2023-07-10 â—¦ [[https://practical.li/engineering-playbook/architecture/structurizr/][Structurizr - Practicalli Engineering Playbook]]
- 2022-10-31 â—¦ [[https://dev.to/icepanel/c4-model-for-system-architecture-design-16dh][C4 model for system architecture design]]
- 2022-10-10 â—¦ [[https://dev.to/indrive_tech/c4-models-architecture-from-simple-to-complex-38fk][C4 Models: Architecture From Simple ToÂ Complex]]

*Structurizr*:
- 2023-10-07 â—¦ [[https://www.structurizr.com/help/themes][Structurizr - Help - Themes]]

*Videos*:
- 2023-07-10 â—¦ [[https://www.youtube.com/watch?v=f7i2wxQVffk&list=PLEx5khR4g7PLf2kQn3nYaZJC2Zv2GPbnY&ab_channel=GOTOConferences][C4 Models as Code â€¢ Simon Brown â€¢ YOW! 2022 - YouTube]]


#+begin_src emacs-lisp :results silent :exports none
;; auto-export
(defun esf/execute-startup-block
	(org-hugo-auto-export-mode)

  ;; set buffer variable
  (setq org-agenda-files nil)

  ;; set-fill-column
  (setq-local fill-column 90)

  (add-to-list 'org-hugo-special-block-type-properties '("sidenote" . (:trim-pre t :trim-post t)))

  )
#+end_src

# Local Variables:
# eval: (esf/execute-startup-block)
# End:
